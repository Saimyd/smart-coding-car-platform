/*
 * Smart Coding Car Platform - Kodlama TahtasÄ± ModÃ¼lÃ¼
 * 
 * Bu kod, fiziksel kodlama bloklarÄ±nÄ± algÄ±layan ESP32 tabanlÄ± kodlama tahtasÄ±nÄ± kontrol eder.
 * KullanÄ±cÄ±lar fiziksel bloklarÄ± tahtaya takarak arabanÄ±n hareketlerini programlayabilir.
 * 
 * Ã–zellikler:
 * - Fiziksel blok algÄ±lama (9 farklÄ± komut)
 * - Wi-Fi baÄŸlantÄ±sÄ± ve otomatik yeniden baÄŸlanma
 * - Firebase ile gerÃ§ek zamanlÄ± veri gÃ¶nderimi
 * - Debounce korumasÄ± (yanlÄ±ÅŸ algÄ±lamayÄ± Ã¶nler)
 * - Ã‡oklu komut desteÄŸi
 * 
 * GeliÅŸtirici: Smart Coding Car Platform
 * Tarih: 2024
 */

#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <vector> // GÃ¶nderilen bloklarÄ± takip etmek iÃ§in vektÃ¶r kullanÄ±mÄ±

/* Wi-Fi AÄŸ AyarlarÄ± - Kendi aÄŸ bilgilerinizi girin */
#define WIFI_SSID "YOUR_WIFI_NAME"      // Wi-Fi aÄŸ adÄ±
#define WIFI_PASSWORD "YOUR_WIFI_PASSWORD"  // Wi-Fi ÅŸifresi

/* Firebase Proje AyarlarÄ± - Kendi Firebase bilgilerinizi girin */
#define API_KEY "YOUR_FIREBASE_API_KEY"  // Firebase API anahtarÄ±
#define DATABASE_URL "https://YOUR_PROJECT_ID-default-rtdb.firebaseio.com/"  // Firebase database URL'i
#define USER_EMAIL "your_email@example.com"     // Firebase kullanÄ±cÄ± email'i
#define USER_PASSWORD "your_password"           // Firebase kullanÄ±cÄ± ÅŸifresi

// Firebase nesneleri
FirebaseData fbdo;      // Firebase veri alÄ±ÅŸveriÅŸi iÃ§in
FirebaseAuth auth;      // Firebase kimlik doÄŸrulama iÃ§in
FirebaseConfig config;  // Firebase yapÄ±landÄ±rma iÃ§in

// Fiziksel Kodlama BloklarÄ±nÄ±n GPIO Pin TanÄ±mlamalarÄ±
#define FORWARD1_PIN 21      // Ä°leri git bloÄŸu 1
#define FORWARD2_PIN 19      // Ä°leri git bloÄŸu 2
#define BACKWARD_PIN 22      // Geri git bloÄŸu 1
#define BACKWARD2_PIN 18     // Geri git bloÄŸu 2
#define RIGHT_TURN_PIN 32    // SaÄŸa dÃ¶n bloÄŸu 1
#define RIGHT_TURN_PIN2 14   // SaÄŸa dÃ¶n bloÄŸu 2
#define LEFT_TURN_PIN 33     // Sola dÃ¶n bloÄŸu
#define HORN_PIN 25          // Korna bloÄŸu
#define HEADLIGHT_PIN 23     // Far bloÄŸu

// Sistem Durum DeÄŸiÅŸkenleri
std::vector<String> sentBlocks;     // Firebase'e gÃ¶nderilen bloklarÄ± takip etmek iÃ§in
unsigned long lastDebounceTime = 0; // Son debounce zamanÄ±
unsigned long debounceDelay = 200;   // 200ms debounce gecikmesi (yanlÄ±ÅŸ algÄ±lamayÄ± Ã¶nler)

// ========== FONKSÄ°YON TANIMLARI ==========

/**
 * Firebase'e komut gÃ¶nderen fonksiyon
 * @param path: Firebase veritabanÄ±ndaki veri yolu
 * @param state: GÃ¶nderilecek deÄŸer (0 veya 1)
 */
void sendCommandToFirebase(String path, int state) {
  if (Firebase.RTDB.setInt(&fbdo, path, state)) {
    Serial.print("âœ“ Komut gÃ¶nderildi -> ");
    Serial.print(path);
    Serial.print(": ");
    Serial.println(state);
  } else {
    Serial.print("âœ— Firebase HatasÄ±: ");
    Serial.println(fbdo.errorReason());
  }
}

// TakÄ±lan bloklarÄ± kontrol et ve Firebase'e veri gÃ¶nder
void checkAndSendBlocks() {
  unsigned long currentMillis = millis();

  if ((currentMillis - lastDebounceTime) > debounceDelay) { // Debounce sÃ¼resi kontrolÃ¼
    // BloklarÄ± kontrol et
    if (!digitalRead(FORWARD1_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "forward1") == sentBlocks.end()) {
      Serial.println("Ä°leri git 1 bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/forward1", 1);
      sentBlocks.push_back("forward1");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(FORWARD2_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "forward2") == sentBlocks.end()) {
      Serial.println("Ä°leri git 2 bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/forward2", 1);
      sentBlocks.push_back("forward2");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(BACKWARD_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "backward") == sentBlocks.end()) {
      Serial.println("Geri git 1 bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/backward", 1);
      sentBlocks.push_back("backward");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(BACKWARD2_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "backward2") == sentBlocks.end()) {
      Serial.println("Geri git 2 bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/backward2", 1);
      sentBlocks.push_back("backward2");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(RIGHT_TURN_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "right") == sentBlocks.end()) {
      Serial.println("SaÄŸa dÃ¶n bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/right", 1);
      sentBlocks.push_back("right");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(RIGHT_TURN_PIN2) && std::find(sentBlocks.begin(), sentBlocks.end(), "right2") == sentBlocks.end()) {
      Serial.println("Yeni saÄŸa dÃ¶n bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/right2", 1);
      sentBlocks.push_back("right2");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(LEFT_TURN_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "left") == sentBlocks.end()) {
      Serial.println("Sola dÃ¶n bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/left", 1);
      sentBlocks.push_back("left");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(HORN_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "horn") == sentBlocks.end()) {
      Serial.println("Korna Ã§al bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/horn", 1);
      sentBlocks.push_back("horn");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
    if (!digitalRead(HEADLIGHT_PIN) && std::find(sentBlocks.begin(), sentBlocks.end(), "headlights") == sentBlocks.end()) {
      Serial.println("Far yak bloÄŸu takÄ±ldÄ±");
      sendCommandToFirebase("/kotlamaTahta/headlights", 1);
      sentBlocks.push_back("headlights");
      lastDebounceTime = currentMillis; // Debounce zamanÄ±nÄ± gÃ¼ncelle
    }
  }
}

// Wi-Fi baÄŸlantÄ±sÄ±nÄ± kontrol et ve yeniden baÄŸlan
void ensureWiFiConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("Wi-Fi baÄŸlantÄ±sÄ± kaybedildi! Yeniden baÄŸlanÄ±yor...");
    WiFi.disconnect();
    delay(1000);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      delay(500);
      Serial.print(".");
    }

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("Wi-Fi baÄŸlantÄ±sÄ± saÄŸlanamadÄ±. 5 saniye sonra yeniden denenecek.");
      delay(5000);
    } else {
      Serial.println("\nWi-Fi baÄŸlantÄ±sÄ± tekrar kuruldu.");
      WiFi.setSleep(false);
      Serial.println("Wi-Fi gÃ¼Ã§ tasarrufu modu devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±.");
    }
  }
}

/**
 * BaÅŸlangÄ±Ã§ kurulum fonksiyonu
 * TÃ¼m pin ayarlarÄ±nÄ±, Wi-Fi ve Firebase baÄŸlantÄ±larÄ±nÄ± kurar
 */
void setup() {
  // Seri haberleÅŸmeyi baÅŸlat
  Serial.begin(115200);
  Serial.println("\n=== Smart Coding Car Platform - Kodlama TahtasÄ± ===");
  Serial.println("Sistem baÅŸlatÄ±lÄ±yor...");

  // Fiziksel blok pinlerini giriÅŸ olarak ayarla (INPUT_PULLUP ile)
  // INPUT_PULLUP: Pin normalde HIGH, blok takÄ±ldÄ±ÄŸÄ±nda LOW olur
  pinMode(FORWARD1_PIN, INPUT_PULLUP);   // Ä°leri git bloÄŸu 1
  pinMode(FORWARD2_PIN, INPUT_PULLUP);   // Ä°leri git bloÄŸu 2
  pinMode(BACKWARD_PIN, INPUT_PULLUP);   // Geri git bloÄŸu 1
  pinMode(BACKWARD2_PIN, INPUT_PULLUP);  // Geri git bloÄŸu 2
  pinMode(RIGHT_TURN_PIN, INPUT_PULLUP); // SaÄŸa dÃ¶n bloÄŸu 1
  pinMode(RIGHT_TURN_PIN2, INPUT_PULLUP);// SaÄŸa dÃ¶n bloÄŸu 2
  pinMode(LEFT_TURN_PIN, INPUT_PULLUP);  // Sola dÃ¶n bloÄŸu
  pinMode(HORN_PIN, INPUT_PULLUP);       // Korna bloÄŸu
  pinMode(HEADLIGHT_PIN, INPUT_PULLUP);  // Far bloÄŸu
  
  Serial.println("âœ“ Blok pinleri ayarlandÄ±");

  // Wi-Fi baÄŸlantÄ±sÄ±nÄ± kur
  Serial.print("Wi-Fi'ye baÄŸlanÄ±lÄ±yor");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  unsigned long startAttemptTime = millis();

  // 10 saniye boyunca baÄŸlantÄ± dene
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(500);
    Serial.print(".");
  }

  // Wi-Fi baÄŸlantÄ± durumunu kontrol et
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nâœ— Wi-Fi baÄŸlantÄ±sÄ± saÄŸlanamadÄ±!");
  } else {
    Serial.println("\nâœ“ Wi-Fi baÄŸlantÄ±sÄ± kuruldu");
    Serial.println("IP Adresi: " + WiFi.localIP().toString());
    WiFi.setSleep(false);  // GÃ¼Ã§ tasarrufu modunu kapat (daha stabil baÄŸlantÄ± iÃ§in)
    Serial.println("âœ“ Wi-Fi gÃ¼Ã§ tasarrufu modu devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±");
  }

  // Firebase baÄŸlantÄ±sÄ±nÄ± kur
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  Firebase.reconnectNetwork(true);  // AÄŸ baÄŸlantÄ±sÄ± kesilirse otomatik yeniden baÄŸlan
  Firebase.begin(&config, &auth);
  Serial.println("âœ“ Firebase baÄŸlantÄ±sÄ± kuruldu");
  
  Serial.println("\nğŸš€ Kodlama tahtasÄ± hazÄ±r! BloklarÄ± takabilirsiniz...");
  Serial.println("==========================================\n");
}

/**
 * Ana dÃ¶ngÃ¼ fonksiyonu
 * Wi-Fi baÄŸlantÄ±sÄ±nÄ± kontrol eder ve bloklarÄ± sÃ¼rekli tarar
 */
void loop() {
  ensureWiFiConnection();  // Wi-Fi baÄŸlantÄ±sÄ±nÄ± kontrol et
  checkAndSendBlocks();    // BloklarÄ± kontrol et ve komutlarÄ± gÃ¶nder
  delay(500);              // CPU yÃ¼kÃ¼nÃ¼ azaltmak iÃ§in kÄ±sa bekleme
}
